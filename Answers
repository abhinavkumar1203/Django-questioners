Q 1)
When a signal is sent, the corresponding signal receiver executes immediately within the same thread and process as the sender. 

Explaination by a simple code snippet : 

import time
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth.models import User

@receiver(post_save, sender=User)
def _handler(sender, instance, **kwargs):
    print(f"Handler started for User: {instance.username}")
    time.sleep(5)  
    print(f"Handler completed for User: {instance.username}")

if __name__ == "__main__":
    user = User(username="test_user")
    user.save()  

    print("User save completed")


Q 2)
Yes, Django signals run in the same thread as the caller by default which means when a signal is sent,
the signal handler executes within the same thread as the code that triggered the signal.

Explaination by a simple code snippet : 

import threading
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth.models import User

@receiver(post_save, sender=User)
def user_post_save_handler(sender, instance, **kwargs):
    print(f"Signal handler thread: {threading.current_thread().name}")

if __name__ == "__main__":
    print(f"Caller thread: {threading.current_thread().name}")

    user = User(username="test_user")
    user.save() 


Q 3)
If the database operation is within a transaction Django signals run in the same database transaction as the caller

Explaination by a simple code snippet : 

from django.db import models, transaction
from django.db.models.signals import post_save
from django.dispatch import receiver

class TestModel(models.Model):
    name = models.CharField(max_length=100)

@receiver(post_save, sender=TestModel)
def post_save_handler(sender, instance, **kwargs):
    print("Signal handler executed")
    TestModel.objects.create(name="Created from signal")

if __name__ == "__main__":
    try:
        with transaction.atomic():
            obj = TestModel(name="Main object")
            obj.save()  
            
            raise Exception("Simulating an error")
    except Exception as e:
        print(f"Transaction rolled back: {e}")

    print(f"Objects in DB: {TestModel.objects.all().count()}")


Rectangle class :

class Rectangle:
    def __init__(self, length: int, width: int):
        self.length = length
        self.width = width

    def __iter__(self):
        yield {'length': self.length}
        yield {'width': self.width}

if __name__ == "__main__":
    rect = Rectangle(length=10, width=5)

    for dimension in rect:
        print(dimension)





